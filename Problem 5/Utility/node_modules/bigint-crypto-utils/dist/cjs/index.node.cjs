"use strict";function n(n){return n>=0?n:-n}function e(n,e){if("number"==typeof n&&(n=BigInt(n)),"number"==typeof e&&(e=BigInt(e)),n<=0n||e<=0n)throw new RangeError("a and b MUST be > 0");let t=0n,r=1n,o=1n,i=0n;for(;0n!==n;){const s=e/n,u=e%n,c=t-o*s,f=r-i*s;e=n,n=u,t=o,r=i,o=c,i=f}return{g:e,x:t,y:r}}function t(e,t){let r="number"==typeof e?BigInt(n(e)):n(e),o="number"==typeof t?BigInt(n(t)):n(t);if(0n===r)return o;if(0n===o)return r;let i=0n;for(;0n===(1n&(r|o));)r>>=1n,o>>=1n,i++;for(;0n===(1n&r);)r>>=1n;do{for(;0n===(1n&o);)o>>=1n;if(r>o){const n=r;r=o,o=n}o-=r}while(0n!==o);return r<<i}function r(n,e){if("number"==typeof n&&(n=BigInt(n)),"number"==typeof e&&(e=BigInt(e)),e<=0n)throw new RangeError("n must be > 0");const t=n%e;return t<0n?t+e:t}function o(n,t){const o=e(r(n,t),t);if(1n!==o.g)throw new RangeError(`${n.toString()} does not have inverse modulo ${t.toString()}`);return r(o.x,t)}function i(n){let e=0n;for(const t of n.values()){e=(e<<8n)+BigInt(t)}return e}exports.toZn=void 0,exports.modPow=void 0,exports.modInv=void 0,exports.min=void 0,exports.max=void 0,exports.lcm=void 0,exports.gcd=void 0,exports.eGcd=void 0,exports.bitLength=void 0,exports.abs=void 0,exports.abs=n,exports.bitLength=function(n){if("number"==typeof n&&(n=BigInt(n)),1n===n)return 1;let e=1;do{e++}while((n>>=1n)>1n);return e},exports.eGcd=e,exports.gcd=t,exports.lcm=function(e,r){return"number"==typeof e&&(e=BigInt(e)),"number"==typeof r&&(r=BigInt(r)),0n===e&&0n===r?BigInt(0):n(e/t(e,r)*r)},exports.max=function(n,e){return n>=e?n:e},exports.min=function(n,e){return n>=e?e:n},exports.modInv=o,exports.modPow=function e(t,i,s){if("number"==typeof t&&(t=BigInt(t)),"number"==typeof i&&(i=BigInt(i)),"number"==typeof s&&(s=BigInt(s)),s<=0n)throw new RangeError("n must be > 0");if(1n===s)return 0n;if(t=r(t,s),i<0n)return o(e(t,n(i),s),s);let u=1n;for(;i>0;)i%2n===1n&&(u=u*t%s),i/=2n,t=t**2n%s;return u},exports.toZn=r;var s=require("crypto");function u(n,e=!1){if(n<1)throw new RangeError("byteLength MUST be > 0");return new Promise((function(t,r){s.randomBytes(n,(function(n,o){null!==n&&r(n),e&&(o[0]=128|o[0]),t(o)}))}))}function c(n,e=!1){if(n<1)throw new RangeError("byteLength MUST be > 0");{const t=s.randomBytes(n);return e&&(t[0]=128|t[0]),t}}function f(n,e=!1){if(n<1)throw new RangeError("bitLength MUST be > 0");const t=Math.ceil(n/8),r=n%8;return new Promise(((n,o)=>{u(t,!1).then((function(t){if(0!==r&&(t[0]=t[0]&2**r-1),e){const n=0!==r?2**(r-1):128;t[0]=t[0]|n}n(t)}))}))}function a(n,e=!1){if(n<1)throw new RangeError("bitLength MUST be > 0");const t=c(Math.ceil(n/8),!1),r=n%8;if(0!==r&&(t[0]=t[0]&2**r-1),e){const n=0!==r?2**(r-1):128;t[0]=t[0]|n}return t}function d(n,e=1n){if(n<=e)throw new RangeError("Arguments MUST be: max > min");const t=n-e,r=exports.bitLength(t);let o;do{o=i(a(r))}while(o>t);return o+e}let p=!1;try{require("worker_threads"),p=!0}catch(r){console.log("[bigint-crypto-utils] WARNING:\nThis node version doesn't support worker_threads. You should enable them in order to greatly speedup the generation of big prime numbers.\n  · With Node >=11 it is enabled by default (consider upgrading).\n  · With Node 10, starting with 10.5.0, you can enable worker_threads at runtime executing node --experimental-worker ")}function g(n,e){if(2n===n)return!0;if(0n===(1n&n)||1n===n)return!1;const t=[3n,5n,7n,11n,13n,17n,19n,23n,29n,31n,37n,41n,43n,47n,53n,59n,61n,67n,71n,73n,79n,83n,89n,97n,101n,103n,107n,109n,113n,127n,131n,137n,139n,149n,151n,157n,163n,167n,173n,179n,181n,191n,193n,197n,199n,211n,223n,227n,229n,233n,239n,241n,251n,257n,263n,269n,271n,277n,281n,283n,293n,307n,311n,313n,317n,331n,337n,347n,349n,353n,359n,367n,373n,379n,383n,389n,397n,401n,409n,419n,421n,431n,433n,439n,443n,449n,457n,461n,463n,467n,479n,487n,491n,499n,503n,509n,521n,523n,541n,547n,557n,563n,569n,571n,577n,587n,593n,599n,601n,607n,613n,617n,619n,631n,641n,643n,647n,653n,659n,661n,673n,677n,683n,691n,701n,709n,719n,727n,733n,739n,743n,751n,757n,761n,769n,773n,787n,797n,809n,811n,821n,823n,827n,829n,839n,853n,857n,859n,863n,877n,881n,883n,887n,907n,911n,919n,929n,937n,941n,947n,953n,967n,971n,977n,983n,991n,997n,1009n,1013n,1019n,1021n,1031n,1033n,1039n,1049n,1051n,1061n,1063n,1069n,1087n,1091n,1093n,1097n,1103n,1109n,1117n,1123n,1129n,1151n,1153n,1163n,1171n,1181n,1187n,1193n,1201n,1213n,1217n,1223n,1229n,1231n,1237n,1249n,1259n,1277n,1279n,1283n,1289n,1291n,1297n,1301n,1303n,1307n,1319n,1321n,1327n,1361n,1367n,1373n,1381n,1399n,1409n,1423n,1427n,1429n,1433n,1439n,1447n,1451n,1453n,1459n,1471n,1481n,1483n,1487n,1489n,1493n,1499n,1511n,1523n,1531n,1543n,1549n,1553n,1559n,1567n,1571n,1579n,1583n,1597n];for(let e=0;e<t.length&&t[e]<=n;e++){const r=t[e];if(n===r)return!0;if(n%r===0n)return!1}let r=0n;const o=n-1n;let i=o;for(;i%2n===0n;)i/=2n,++r;const s=o/2n**r;do{const e=d(o,2n);let t=exports.modPow(e,s,n);if(1n===t||t===o)continue;let i=1;for(;i<r&&(t=exports.modPow(t,2n,n),t!==o);){if(1n===t)return!1;i++}if(t!==o)return!1}while(0!=--e);return!0}if(p)try{var b=require("worker_threads");if(!b.isMainThread&&null!==b.parentPort){const n=b.parentPort;n.on("message",(function(e){if(void 0!==e?._bcu?.iterations&&void 0!==e?._bcu?.rnd){const t={_bcu:{isPrime:g(e._bcu.rnd,e._bcu.iterations),value:e._bcu.rnd,id:e._bcu.id}};n.postMessage(t)}}))}}catch(n){}var h=require("os");try{var m=require("worker_threads")}catch{}exports.isProbablyPrime=function(n,e=16,t=!1){if("number"==typeof n&&(n=BigInt(n)),n<0n)throw RangeError("w MUST be >= 0");return new Promise(!t&&p?(t,r)=>{const o=new b.Worker(__filename);o.on("message",(n=>{void 0!==n?._bcu?.isPrime&&(o.terminate().catch(r),t(n._bcu.isPrime))})),o.on("error",r);const i={_bcu:{rnd:n,iterations:e,id:0}};o.postMessage(i)}:t=>{t(g(n,e))})},exports.prime=function(n,e=16){if(n<1)throw new RangeError("bitLength MUST be > 0");if(!p){let t=0n;do{t=i(a(n,!0))}while(!g(t,e));return new Promise((n=>{n(t)}))}return new Promise(((t,r)=>{const o=[],s=(r,s)=>{if(r._bcu.isPrime){for(let n=0;n<o.length;n++)o[n].terminate();for(;o.length>0;)o.pop();t(r._bcu.value)}else{const t=i(a(n,!0));try{const n={_bcu:{rnd:t,iterations:e,id:r._bcu.id}};s.postMessage(n)}catch(n){}}};for(let n=0;n<h.cpus().length-1;n++){const n=new m.Worker(__filename);n.on("message",(e=>s(e,n))),o.push(n)}for(let t=0;t<o.length;t++)f(n,!0).then((function(n){const r=i(n);o[t].postMessage({_bcu:{rnd:r,iterations:e,id:t}})})).catch(r)}))},exports.primeSync=function(n,e=16){if(n<1)throw new RangeError("bitLength MUST be > 0");let t=0n;do{t=i(a(n,!0))}while(!g(t,e));return t},exports.randBetween=d,exports.randBits=f,exports.randBitsSync=a,exports.randBytes=u,exports.randBytesSync=c;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgubm9kZS5janMiLCJzb3VyY2VzIjpbIi4uLy4uL25vZGVfbW9kdWxlcy9iaWdpbnQtbW9kLWFyaXRoL2Rpc3QvY2pzL2luZGV4Lm5vZGUuY2pzIiwiLi4vLi4vc3JjL3RzL2Zyb21CdWZmZXIudHMiLCIuLi8uLi9zcmMvdHMvcmFuZEJ5dGVzLnRzIiwiLi4vLi4vc3JjL3RzL3JhbmRCaXRzLnRzIiwiLi4vLi4vc3JjL3RzL3JhbmRCZXR3ZWVuLnRzIiwiLi4vLi4vc3JjL3RzL3dvcmtlclV0aWxzLnRzIiwiLi4vLi4vc3JjL3RzL2lzUHJvYmFibHlQcmltZS50cyIsIi4uLy4uL3NyYy90cy9wcmltZS50cyJdLCJzb3VyY2VzQ29udGVudCI6bnVsbCwibmFtZXMiOlsibiIsInQiLCJCaWdJbnQiLCJSYW5nZUVycm9yIiwiciIsImUiLCJvIiwiaSIsInUiLCJmIiwiZyIsInAiLCJ4IiwieSIsInRvU3RyaW5nIiwiZnJvbUJ1ZmZlciIsImJ1ZiIsInJldCIsInZhbHVlcyIsImFicyIsImJpdExlbmd0aCIsImVHY2QiLCJnY2QiLCJsY20iLCJtYXgiLCJtaW4iLCJtb2RJbnYiLCJtb2RQb3ciLCJ0b1puIiwiY3J5cHRvIiwicmVxdWlyZSIsInJhbmRCeXRlcyIsImJ5dGVMZW5ndGgiLCJmb3JjZUxlbmd0aCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmFuZG9tQnl0ZXMiLCJlcnIiLCJyYW5kQnl0ZXNTeW5jIiwicmFuZEJpdHMiLCJNYXRoIiwiY2VpbCIsImJpdExlbmd0aE1vZDgiLCJ0aGVuIiwicm5kQnl0ZXMiLCJtYXNrIiwicmFuZEJpdHNTeW5jIiwicmFuZEJldHdlZW4iLCJpbnRlcnZhbCIsImJpdExlbiIsInJuZCIsIl91c2VXb3JrZXJzIiwiY29uc29sZSIsImxvZyIsIl9pc1Byb2JhYmx5UHJpbWUiLCJ3IiwiaXRlcmF0aW9ucyIsImZpcnN0UHJpbWVzIiwibGVuZ3RoIiwiYSIsImQiLCJhdXgiLCJtIiwiYiIsInoiLCJqIiwid29ya2VyVGhyZWFkcyIsInBhcmVudFBvcnQiLCJvbiIsImRhdGEiLCJ1bmRlZmluZWQiLCJfYmN1IiwibXNnIiwiaXNQcmltZSIsInZhbHVlIiwiaWQiLCJwb3N0TWVzc2FnZSIsImVycm9yIiwib3MiLCJkaXNhYmxlV29ya2VycyIsIndvcmtlciIsIldvcmtlciIsIl9fZmlsZW5hbWUiLCJ0ZXJtaW5hdGUiLCJjYXRjaCIsIndvcmtlckxpc3QiLCJfb25tZXNzYWdlIiwibmV3V29ya2VyIiwicG9wIiwibXNnVG9Xb3JrZXIiLCJjcHVzIiwicHVzaCJdLCJtYXBwaW5ncyI6ImFBQWEsU0FBU0EsRUFBRUEsR0FBRyxPQUFPQSxHQUFHLEVBQUVBLEdBQUdBLENBQUMsQ0FBQyxTQUFTQyxFQUFFRCxFQUFFQyxHQUFHLEdBQUcsaUJBQWlCRCxJQUFJQSxFQUFFRSxPQUFPRixJQUFJLGlCQUFpQkMsSUFBSUEsRUFBRUMsT0FBT0QsSUFBSUQsR0FBRyxJQUFJQyxHQUFHLEdBQUcsTUFBTSxJQUFJRSxXQUFXLHVCQUF1QixJQUFJQyxFQUFFLEdBQUdDLEVBQUUsR0FBR0MsRUFBRSxHQUFHQyxFQUFFLEdBQUcsS0FBSyxLQUFLUCxHQUFHLENBQUMsTUFBTVEsRUFBRVAsRUFBRUQsRUFBRVMsRUFBRVIsRUFBRUQsRUFBRVUsRUFBRU4sRUFBRUUsRUFBRUUsRUFBRUcsRUFBRU4sRUFBRUUsRUFBRUMsRUFBRVAsRUFBRUQsRUFBRUEsRUFBRVMsRUFBRUwsRUFBRUUsRUFBRUQsRUFBRUUsRUFBRUQsRUFBRUksRUFBRUgsRUFBRUksQ0FBQyxDQUFDLE1BQU0sQ0FBQ0QsRUFBRVQsRUFBRVcsRUFBRVIsRUFBRVMsRUFBRVIsRUFBRSxDQUFDLFNBQVNELEVBQUVILEVBQUVHLEdBQUcsSUFBSUMsRUFBRSxpQkFBaUJKLEVBQUVDLE9BQU9GLEVBQUVDLElBQUlELEVBQUVDLEdBQUdLLEVBQUUsaUJBQWlCRixFQUFFRixPQUFPRixFQUFFSSxJQUFJSixFQUFFSSxHQUFHLEdBQUcsS0FBS0MsRUFBRSxPQUFPQyxFQUFFLEdBQUcs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Q0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsT0FHRixJQUFLLElBQUluRCxFQUFJLEVBQUdBLEVBQUltRCxFQUFZQyxRQUFXRCxFQUFZbkQsSUFB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
